Resources:
  SNSRole:
    # Created to allow the UserPool SMS Config to publish via the Simple Notification Service during MFA Process
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}_sns-role-${self:provider.stage}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: ${self:service}_role_external_id
      Policies:
        - PolicyName: ${self:service}-sns-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "*"
  # BEGIN USER POOL RESOURCES
  CognitoUserPoolAppUserPool:
    # Created upon user selection
    # Depends on SNS Role for Arn if MFA is enabled
    Type: AWS::Cognito::UserPool
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: ${self:service}_userpool_${self:provider.stage}
      Schema:
        - Name: email
          Required: true
          Mutable: true
      AutoVerifiedAttributes: ${self:custom.auth.autoVerifiedAttributes}
      EmailVerificationMessage: ${self:custom.auth.emailVerificationMessage}
      EmailVerificationSubject: ${self:custom.auth.emailVerificationSubject}
      Policies:
        PasswordPolicy:
          MinimumLength: ${self:custom.auth.passwordPolicyMinLength}
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes: ${self:custom.auth.usernameAttributes}
      MfaConfiguration: ${self:custom.auth.mfaConfiguration}
      SmsVerificationMessage: ${self:custom.auth.smsVerificationMessage}
      SmsConfiguration:
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: ${self:service}_role_external_id
  UserPoolClientWeb:
    # Created provide application access to user pool
    # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: ${self:service}_app_clientWeb
      RefreshTokenValidity: ${self:custom.auth.userpoolClientRefreshTokenValidity}
      UserPoolId: !Ref CognitoUserPoolAppUserPool
    DependsOn: CognitoUserPoolAppUserPool

  UserPoolClientMobile:
    # Created provide application access to user pool
    # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: ${self:service}_app_clientMobile
      RefreshTokenValidity: ${self:custom.auth.userpoolClientRefreshTokenValidity}
      UserPoolId: !Ref CognitoUserPoolAppUserPool
    DependsOn: CognitoUserPoolAppUserPool

  UserPoolClient:
    # Created provide application access to user pool
    # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: ${self:service}_app_client
      GenerateSecret: ${self:custom.auth.userpoolClientGenerateSecret}
      RefreshTokenValidity: ${self:custom.auth.userpoolClientRefreshTokenValidity}
      UserPoolId: !Ref CognitoUserPoolAppUserPool
    DependsOn: CognitoUserPoolAppUserPool

  # BEGIN USER POOL LAMBDA RESOURCES
  # BEGIN USER POOL LAMBDA RESOURCES
  UserPoolClientRole:
    # Created to execute Lambda which gets userpool app client config values
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ${self:service}-userpoolClientLambdaRole-${self:provider.stage}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
    DependsOn: UserPoolClient
  UserPoolClientLambda:
    # Lambda which gets userpool app client config values
    # Depends on UserPool for id
    # Depends on UserPoolClientRole for role ARN
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Join
          - |+
          - - "const response = require('cfn-response');"
            - "const aws = require('aws-sdk');"
            - "const identity = new aws.CognitoIdentityServiceProvider();"
            - "exports.handler = (event, context, callback) => {"
            - " if (event.RequestType == 'Delete') { "
            - "   response.send(event, context, response.SUCCESS, {})"
            - " }"
            - " if (event.RequestType == 'Update' || event.RequestType == 'Create') {"
            - "   const params = {"
            - "     ClientId: event.ResourceProperties.clientId,"
            - "     UserPoolId: event.ResourceProperties.userpoolId"
            - "   };"
            - "   identity.describeUserPoolClient(params).promise()"
            - "     .then((res) => {"
            - "       response.send(event, context, response.SUCCESS, {'appSecret': res.UserPoolClient.ClientSecret});"
            - "     })"
            - "     .catch((err) => {"
            - "       response.send(event, context, response.FAILED, {err});"
            - "     });"
            - " }"
            - "};"
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: "300"
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole
  UserPoolClientLambdaPolicy:
    # Sets userpool policy for the role that executes the Userpool Client Lambda
    # Depends on UserPool for Arn
    # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ${self:service}_userpoolclient_lambda_iam_policy
      Roles:
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:DescribeUserPoolClient"
            Resource: !GetAtt CognitoUserPoolAppUserPool.Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientInputs:
    # Values passed to Userpool client Lambda
    # Depends on UserPool for Id
    # Depends on UserPoolClient for Id
    # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref CognitoUserPoolAppUserPool
    DependsOn: UserPoolClientLambdaPolicy
  HostedUICustomResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Join
          - |+
          - - "const response = require('cfn-response');"
            - "const aws = require('aws-sdk');"
            - "const identity = new aws.CognitoIdentityServiceProvider();"
            - "exports.handler = (event, context, callback) => {"
            - " const userPoolId = event.ResourceProperties.userPoolId;"
            - " const inputDomainName = event.ResourceProperties.hostedUIDomainName;"
            - " let deleteUserPoolDomain = (domainName) => {"
            - "   let params = { Domain: domainName, UserPoolId: userPoolId };"
            - "   return identity.deleteUserPoolDomain(params).promise();"
            - " };"
            - " if (event.RequestType == 'Delete') {"
            - "   deleteUserPoolDomain(inputDomainName)"
            - "   .then(() => {response.send(event, context, response.SUCCESS, {})})"
            - "   .catch((err) => { console.log(err); response.send(event, context, response.FAILED, {err}) });"
            - " }"
            - " if (event.RequestType == 'Update' || event.RequestType == 'Create') {"
            - "  let checkDomainAvailability = (domainName) => {"
            - "  let params = { Domain: domainName };"
            - "  return identity.describeUserPoolDomain(params).promise().then((res) => {"
            - "   if (res.DomainDescription && res.DomainDescription.UserPool) {"
            - "    return false;"
            - "   }"
            - "   return true;"
            - "   }).catch((err) => { return false; });"
            - " };"
            - " let createUserPoolDomain = (domainName) => {"
            - "  let params = { Domain: domainName, UserPoolId: userPoolId };"
            - "   return identity.createUserPoolDomain(params).promise();"
            - " };"
            - " identity.describeUserPool({UserPoolId: userPoolId }).promise().then((result) => {"
            - "  if (inputDomainName) {"
            - "   if (result.UserPool.Domain === inputDomainName) {"
            - "    return;"
            - "    } else {"
            - "       if (!result.UserPool.Domain) {"
            - "         return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {"
            - "           if (isDomainAvailable) {"
            - "             return createUserPoolDomain(inputDomainName);"
            - "           } else {"
            - "               throw new Error('Domain not available');"
            - "           }"
            - "         });"
            - "       } else {"
            - "           return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {"
            - "             if (isDomainAvailable) {"
            - "               return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));"
            - "             } else {"
            - "                 throw new Error('Domain not available');"
            - "             }"
            - "           });"
            - "       }"
            - "     }"
            - "   } else {"
            - "       if (result.UserPool.Domain) {"
            - "         return deleteUserPoolDomain(result.UserPool.Domain);"
            - "       }"
            - "   }"
            - " }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {"
            - " console.log(err);  response.send(event, context, response.FAILED, {err});"
            - " });"
            - "}}"

      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: "300"
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole

  HostedUICustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ${self:service}_hostedUI_policy
      Roles:
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:CreateUserPoolDomain"
              - "cognito-idp:DescribeUserPool"
              - "cognito-idp:DeleteUserPoolDomain"
            Resource: !GetAtt CognitoUserPoolAppUserPool.Arn
          - Effect: Allow
            Action:
              - "cognito-idp:DescribeUserPoolDomain"
            Resource: "*"
    DependsOn: HostedUICustomResource
  HostedUICustomResourceInputs:
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt HostedUICustomResource.Arn
      userPoolId: !Ref CognitoUserPoolAppUserPool
      hostedUIDomainName: ${self:custom.auth.hostedUIDomainName}-${self:provider.stage}
    DependsOn: HostedUICustomResourcePolicy

  HostedUIProvidersCustomResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Join
          - |+
          - - "const response = require('cfn-response');"
            - "const aws = require('aws-sdk');"
            - "const identity = new aws.CognitoIdentityServiceProvider();"
            - "exports.handler = (event, context, callback) => {"
            - "try{"
            - " const userPoolId = event.ResourceProperties.userPoolId;"
            - " let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);"
            - " let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);"
            - " if (event.RequestType == 'Delete') {"
            - "  response.send(event, context, response.SUCCESS, {});"
            - " }"
            - " if (event.RequestType == 'Update' || event.RequestType == 'Create') {"
            - "  let getRequestParams = (providerName) => {"
            - "   let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);"
            - "   let providerMeta =  hostedUIProviderMeta[providerMetaIndex];"
            - "   let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);"
            - "   let providerCreds = hostedUIProviderCreds[providerCredsIndex];"
            - "   let requestParams = {"
            - "    ProviderDetails: {"
            - "     'client_id': providerCreds.client_id,"
            - "     'client_secret': providerCreds.client_secret,"
            - "     'authorize_scopes': providerMeta.authorize_scopes"
            - "    },"
            - "    ProviderName: providerMeta.ProviderName,"
            - "    UserPoolId: userPoolId,"
            - "    AttributeMapping: providerMeta.AttributeMapping"
            - "   };"
            - "   return requestParams;"
            - "  };"
            - "  let createIdentityProvider = (providerName) => {"
            - "   let requestParams = getRequestParams(providerName);"
            - "   requestParams.ProviderType = requestParams.ProviderName;"
            - "   return identity.createIdentityProvider(requestParams).promise();"
            - "  };"
            - "  let updateIdentityProvider = (providerName) => {"
            - "   let requestParams = getRequestParams(providerName);"
            - "   return identity.updateIdentityProvider(requestParams).promise();"
            - "  };"
            - "  let deleteIdentityProvider = (providerName) => {"
            - "   let params = {ProviderName: providerName, UserPoolId: userPoolId};"
            - "   return identity.deleteIdentityProvider(params).promise();"
            - "  };"
            - "  let providerPromises = [];"
            - "  identity.listIdentityProviders({UserPoolId: userPoolId, MaxResults: 60}).promise()"
            - "  .then((result) => {"
            - "   let providerList = result.Providers.map(provider => provider.ProviderName);"
            - "   let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);"
            - "   hostedUIProviderMeta.forEach((providerMetadata) => {"
            - "    if(providerList.indexOf(providerMetadata.ProviderName) > -1) {"
            - "     providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));"
            - "    } else {"
            - "     providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));"
            - "    }"
            - "  });"
            - "  providerList.forEach((provider) => {"
            - "   if(providerListInParameters.indexOf(provider) < 0) {"
            - "    providerPromises.push(deleteIdentityProvider(provider));"
            - "   }"
            - "  });"
            - "  return Promise.all(providerPromises);"
            - " }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {"
            - "   console.log(err.stack); response.send(event, context, response.FAILED, {err})"
            - " });"
            - " } "
            - " } catch(err) { console.log(err.stack); response.send(event, context, response.FAILED, {err});};"
            - "} "

      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: "300"
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole
  HostedUIProvidersCustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ${self:service}_hostedUIProviderI_policy
      Roles:
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:CreateIdentityProvider"
              - "cognito-idp:UpdateIdentityProvider"
              - "cognito-idp:ListIdentityProviders"
              - "cognito-idp:DeleteIdentityProvider"
            Resource: !GetAtt CognitoUserPoolAppUserPool.Arn
    DependsOn: HostedUIProvidersCustomResource
  HostedUIProvidersCustomResourceInputs:
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt HostedUIProvidersCustomResource.Arn
      userPoolId: !Ref CognitoUserPoolAppUserPool
      hostedUIProviderMeta: ${self:custom.auth.hostedUIProviderMeta}
      hostedUIProviderCreds: ${self:custom.auth.hostedUIProviderCreds}
    DependsOn: HostedUIProvidersCustomResourcePolicy

  OAuthCustomResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Join
          - |+
          - - "const response = require('cfn-response');"
            - "const aws = require('aws-sdk');"
            - "const identity = new aws.CognitoIdentityServiceProvider();"
            - "exports.handler = (event, context, callback) => {"
            - "try{"
            - " const userPoolId = event.ResourceProperties.userPoolId;"
            - " let webClientId = event.ResourceProperties.webClientId;"
            - " let nativeClientId = event.ResourceProperties.nativeClientId;"
            - " let mobileClientId = event.ResourceProperties.mobileClientId;"
            - " let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);"
            - " let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);"
            - " let providerList = hostedUIProviderMeta.map(provider => provider.ProviderName);"
            - " providerList.push('COGNITO');"
            - " if (event.RequestType == 'Delete') {"
            - "  response.send(event, context, response.SUCCESS, {});"
            - " }"
            - " if (event.RequestType == 'Update' || event.RequestType == 'Create') {"
            - "  let params = {"
            - "   UserPoolId: userPoolId,"
            - "   AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,"
            - "   AllowedOAuthFlowsUserPoolClient: true,"
            - "   AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,"
            - "   CallbackURLs: oAuthMetadata.CallbackURLs,"
            - "   LogoutURLs: oAuthMetadata.LogoutURLs,"
            - "   SupportedIdentityProviders: providerList"
            - "  };"
            - "  let updateUserPoolClientPromises = [];"
            - "  params.ClientId = webClientId;"
            - "  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());"
            - "  params.ClientId = nativeClientId;"
            - "  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());"
            - "  params.ClientId = mobileClientId;"
            - "  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());"
            - "  Promise.all(updateUserPoolClientPromises)"
            - "  .then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {"
            - "    console.log(err.stack); response.send(event, context, response.FAILED, {err});"
            - "  });"
            - " }"
            - "} catch(err) { console.log(err.stack); response.send(event, context, response.FAILED, {err});};"
            - "}"

      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: "300"
      Role: !GetAtt
        - UserPoolClientRole
        - Arn
    DependsOn: HostedUIProvidersCustomResourceInputs

  OAuthCustomResourcePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ${self:service}_OAuthPolicy
      Roles:
        - !Ref UserPoolClientRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cognito-idp:UpdateUserPoolClient"
            Resource: !GetAtt CognitoUserPoolAppUserPool.Arn
    DependsOn: OAuthCustomResource
  OAuthCustomResourceInputs:
    Type: "Custom::LambdaCallout"
    Properties:
      ServiceToken: !GetAtt OAuthCustomResource.Arn
      userPoolId: !Ref CognitoUserPoolAppUserPool
      hostedUIProviderMeta: ${self:custom.auth.hostedUIProviderMeta}
      oAuthMetadata: ${self:custom.auth.oAuthMetadata}
      webClientId: !Ref "UserPoolClientWeb"
      mobileClientId: !Ref "UserPoolClientMobile"
      nativeClientId: !Ref "UserPoolClient"
    DependsOn: OAuthCustomResourcePolicy

  # BEGIN IDENTITY POOL RESOURCES
  IdentityPool:
    # Always created
    Type: AWS::Cognito::IdentityPool
    Properties:
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Join
            - ""
            - - "cognito-idp."
              - !Ref "AWS::Region"
              - ".amazonaws.com/"
              - !Ref CognitoUserPoolAppUserPool
        - ClientId: !Ref UserPoolClientWeb
          ProviderName: !Join
            - ""
            - - "cognito-idp."
              - !Ref "AWS::Region"
              - ".amazonaws.com/"
              - !Ref CognitoUserPoolAppUserPool
        - ClientId: !Ref UserPoolClientMobile
          ProviderName: !Join
            - ""
            - - "cognito-idp."
              - !Ref "AWS::Region"
              - ".amazonaws.com/"
              - !Ref CognitoUserPoolAppUserPool
      AllowUnauthenticatedIdentities: ${self:custom.auth.allowUnauthenticatedIdentities}

    DependsOn: UserPoolClientInputs

  IdentityPoolRoleMap:
    # Created to map Auth and Unauth roles to the identity pool
    # Depends on Identity Pool for ID ref
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn
    DependsOn: IdentityPool

Outputs:
  ProjectRegion:
    Value:
      Ref: AWS::Region
  CognitoRegion:
    Value:
      Ref: AWS::Region
  IdentityPoolId:
    Value: !Ref "IdentityPool"
    Description: Id for the identity pool
  IdentityPoolName:
    Value: !GetAtt IdentityPool.Name

  HostedUIDomain:
    Value: !Join
      - "."
      - - ${self:custom.auth.hostedUIDomainName}-${self:provider.stage}
        - "auth"
        - Ref: AWS::Region
        - "amazoncognito.com"

  OAuthRedirectURI:
    Value: !Join
      - "."
      - - https://${self:custom.auth.hostedUIDomainName}-${self:provider.stage}
        - "auth"
        - Ref: AWS::Region
        - "amazoncognito.com/oauth2/idpresponse"

  OAuthMetadata:
    Value: ${self:custom.auth.oAuthMetadata}

  UserPoolId:
    Value: !Ref CognitoUserPoolAppUserPool
    Description: Id for the user pool
  UserPoolName:
    Value: ${self:service}_userpool_${self:provider.stage}
  AppClientIDWeb:
    Value: !Ref "UserPoolClientWeb"
    Description: The user pool app client id for web
  AppClientIDMobile:
    Value: !Ref "UserPoolClientMobile"
    Description: The user pool app client id for flutter app
  AppClientID:
    Value: !Ref "UserPoolClient"
    Description: The user pool app client id
  AppClientSecret:
    Value: !GetAtt UserPoolClientInputs.appSecret
